{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 3}, "tests": {"0": {"status": "FAIL", "message": "   selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\n   from unknown error: web view not found\n     (Session info: chrome=129.0.6668.72)\n   Stacktrace:\n   \tGetHandleVerifier [0x00007FF7D15BB645+29573]\n   \t(No symbol) [0x00007FF7D1530470]\n   \t(No symbol) [0x00007FF7D13EB6EA]\n   \t(No symbol) [0x00007FF7D13BFCD5]\n   \t(No symbol) [0x00007FF7D146EF67]\n   \t(No symbol) [0x00007FF7D1487FC1]\n   \t(No symbol) [0x00007FF7D14670A3]\n   \t(No symbol) [0x00007FF7D14312DF]\n   \t(No symbol) [0x00007FF7D1432441]\n   \tGetHandleVerifier [0x00007FF7D18EC58D+3375821]\n   \tGetHandleVerifier [0x00007FF7D1937987+3684039]\n   \tGetHandleVerifier [0x00007FF7D192CDAB+3640043]\n   \tGetHandleVerifier [0x00007FF7D167B7C6+816390]\n   \t(No symbol) [0x00007FF7D153B77F]\n   \t(No symbol) [0x00007FF7D15375A4]\n   \t(No symbol) [0x00007FF7D1537740]\n   \t(No symbol) [0x00007FF7D152659F]\n   \tBaseThreadInitThunk [0x00007FFAC4A57374+20]\n   \tRtlUserThreadStart [0x00007FFAC53DCC91+33]\n", "test_name": "test_login_timesheet_with_different_excel_users[Virat]", "rerun": "0"}, "1": {"status": "ERROR", "message": "request = <SubRequest 'test_setup' for <Function test_login_timesheet_with_different_excel_users[rohit]>>\n\n    @pytest.fixture(scope=\"function\")\n    def test_setup(request):\n        driver = webdriver.Chrome()\n        chrome_options = webdriver.ChromeOptions()\n        chrome_options.add_argument(\"--headless\")\n        driver.get(con.url)\n>       driver.maximize_window()\n\ntest_cases\\conftest.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:506: in maximize_window\n    self.execute(command, None)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002736794B6B0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF7D152659F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAC4A57374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFAC53DCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=129.0.6668.72)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7D15BB645+29573]\nE       \t(No symbol) [0x00007FF7D1530470]\nE       \t(No symbol) [0x00007FF7D13EB6EA]\nE       \t(No symbol) [0x00007FF7D13BFCD5]\nE       \t(No symbol) [0x00007FF7D146EF67]\nE       \t(No symbol) [0x00007FF7D1487FC1]\nE       \t(No symbol) [0x00007FF7D14670A3]\nE       \t(No symbol) [0x00007FF7D14312DF]\nE       \t(No symbol) [0x00007FF7D1432441]\nE       \tGetHandleVerifier [0x00007FF7D18EC58D+3375821]\nE       \tGetHandleVerifier [0x00007FF7D1937987+3684039]\nE       \tGetHandleVerifier [0x00007FF7D192CDAB+3640043]\nE       \tGetHandleVerifier [0x00007FF7D167B7C6+816390]\nE       \t(No symbol) [0x00007FF7D153B77F]\nE       \t(No symbol) [0x00007FF7D15375A4]\nE       \t(No symbol) [0x00007FF7D1537740]\nE       \t(No symbol) [0x00007FF7D152659F]\nE       \tBaseThreadInitThunk [0x00007FFAC4A57374+20]\nE       \tRtlUserThreadStart [0x00007FFAC53DCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException\n", "test_name": "test_login_timesheet_with_different_excel_users[rohit]", "rerun": "0"}, "2": {"status": "ERROR", "message": "request = <SubRequest 'test_setup' for <Function test_login_timesheet_with_different_excel_users[rahul]>>\n\n    @pytest.fixture(scope=\"function\")\n    def test_setup(request):\n        driver = webdriver.Chrome()\n        chrome_options = webdriver.ChromeOptions()\n        chrome_options.add_argument(\"--headless\")\n        driver.get(con.url)\n>       driver.maximize_window()\n\ntest_cases\\conftest.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:506: in maximize_window\n    self.execute(command, None)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027364A192B0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF7D152659F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAC4A57374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFAC53DCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=129.0.6668.72)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7D15BB645+29573]\nE       \t(No symbol) [0x00007FF7D1530470]\nE       \t(No symbol) [0x00007FF7D13EB6EA]\nE       \t(No symbol) [0x00007FF7D13BFCD5]\nE       \t(No symbol) [0x00007FF7D146EF67]\nE       \t(No symbol) [0x00007FF7D1487FC1]\nE       \t(No symbol) [0x00007FF7D14670A3]\nE       \t(No symbol) [0x00007FF7D14312DF]\nE       \t(No symbol) [0x00007FF7D1432441]\nE       \tGetHandleVerifier [0x00007FF7D18EC58D+3375821]\nE       \tGetHandleVerifier [0x00007FF7D1937987+3684039]\nE       \tGetHandleVerifier [0x00007FF7D192CDAB+3640043]\nE       \tGetHandleVerifier [0x00007FF7D167B7C6+816390]\nE       \t(No symbol) [0x00007FF7D153B77F]\nE       \t(No symbol) [0x00007FF7D15375A4]\nE       \t(No symbol) [0x00007FF7D1537740]\nE       \t(No symbol) [0x00007FF7D152659F]\nE       \tBaseThreadInitThunk [0x00007FFAC4A57374+20]\nE       \tRtlUserThreadStart [0x00007FFAC53DCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException\n", "test_name": "test_login_timesheet_with_different_excel_users[rahul]", "rerun": "0"}, "3": {"status": "ERROR", "message": "request = <SubRequest 'test_setup' for <Function test_login_timesheet_with_different_excel_users[Bumrah]>>\n\n    @pytest.fixture(scope=\"function\")\n    def test_setup(request):\n        driver = webdriver.Chrome()\n        chrome_options = webdriver.ChromeOptions()\n        chrome_options.add_argument(\"--headless\")\n        driver.get(con.url)\n>       driver.maximize_window()\n\ntest_cases\\conftest.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:506: in maximize_window\n    self.execute(command, None)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027367CE2C00>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF7D152659F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAC4A57374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFAC53DCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=129.0.6668.72)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7D15BB645+29573]\nE       \t(No symbol) [0x00007FF7D1530470]\nE       \t(No symbol) [0x00007FF7D13EB6EA]\nE       \t(No symbol) [0x00007FF7D13BFCD5]\nE       \t(No symbol) [0x00007FF7D146EF67]\nE       \t(No symbol) [0x00007FF7D1487FC1]\nE       \t(No symbol) [0x00007FF7D14670A3]\nE       \t(No symbol) [0x00007FF7D14312DF]\nE       \t(No symbol) [0x00007FF7D1432441]\nE       \tGetHandleVerifier [0x00007FF7D18EC58D+3375821]\nE       \tGetHandleVerifier [0x00007FF7D1937987+3684039]\nE       \tGetHandleVerifier [0x00007FF7D192CDAB+3640043]\nE       \tGetHandleVerifier [0x00007FF7D167B7C6+816390]\nE       \t(No symbol) [0x00007FF7D153B77F]\nE       \t(No symbol) [0x00007FF7D15375A4]\nE       \t(No symbol) [0x00007FF7D1537740]\nE       \t(No symbol) [0x00007FF7D152659F]\nE       \tBaseThreadInitThunk [0x00007FFAC4A57374+20]\nE       \tRtlUserThreadStart [0x00007FFAC53DCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException\n", "test_name": "test_login_timesheet_with_different_excel_users[Bumrah]", "rerun": "0"}}, "suite_name": "test_cases/test_logints.py"}}}, "date": "October 03, 2024", "start_time": 1727946096.4456122, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "1", "skip": "0", "error": "3", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "4"}